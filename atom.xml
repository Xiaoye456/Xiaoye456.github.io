<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaoye11的个人博客</title>
  
  <subtitle>✌嘻嘻</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-01T15:39:18.199Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xiaoye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue3的学习</title>
    <link href="http://example.com/2023/02/01/vue3%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/02/01/vue3%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-02-01T15:20:47.000Z</published>
    <updated>2023-02-01T15:39:18.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;模板语法&quot;&gt;&lt;a href=&quot;#模板语法&quot; class=&quot;headerlink&quot; title=&quot;模板语法&quot;&gt;&lt;/a&gt;模板语法&lt;/h3&gt;&lt;h3 id=&quot;条件渲染&quot;&gt;&lt;a href=&quot;#条件渲染&quot; class=&quot;headerlink&quot; title=&quot;条件渲染&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js进阶(ES6新语法)</title>
    <link href="http://example.com/2023/01/31/js%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2023/01/31/js%E8%BF%9B%E9%98%B6/</id>
    <published>2023-01-31T15:07:13.000Z</published>
    <updated>2023-02-01T14:43:40.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p><em>一般不确定实参多少个的情况下，可以把实参都接收过来</em></p><ul><li><p>arguments：是在函数内部存的动态参数变量，是一个伪数组，内部包含了调用函数时传入的所有实参</p></li><li><p>伪数组可以遍历，因此可以遍历获取所有实参</p></li><li><p>伪数组是不能用数组的方法的</p></li><li><h5 id="ES6推出了新语法，剩余参数"><a href="#ES6推出了新语法，剩余参数" class="headerlink" title="ES6推出了新语法，剩余参数"></a>ES6推出了新语法，剩余参数</h5><ul><li><h5 id="在形参前写…，如function-getNum（…a）-console-log-a"><a href="#在形参前写…，如function-getNum（…a）-console-log-a" class="headerlink" title="在形参前写…，如function getNum（…a）{console.log(a)},"></a>在形参前写…，如function getNum（…a）{console.log(a)},</h5></li><li><p>取过来的参数会变成数组，就可以使用数组的方法</p></li></ul></li><li><h5 id="数组一般用forEach（callback）方法遍历，不需要用for循环"><a href="#数组一般用forEach（callback）方法遍历，不需要用for循环" class="headerlink" title="数组一般用forEach（callback）方法遍历，不需要用for循环"></a>数组一般用forEach（callback）方法遍历，不需要用for循环</h5></li><li><h5 id="开发一般用剩余参数"><a href="#开发一般用剩余参数" class="headerlink" title="开发一般用剩余参数"></a>开发一般用剩余参数</h5></li><li><p>剩余参数也可以用于将数组、对象进行合并</p></li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ol><li><p>箭头函数只有一个形参时，可以省略（）</p><ul><li>let fn1 &#x3D; (<em>num</em>) &#x3D;&gt; {</li></ul><p>​      console.log(<em>num</em>);</p><p>​    }</p><p>​    fn1(100)</p><ul><li>let fn1 &#x3D; <em>num</em> &#x3D;&gt; {</li></ul><p>  ​      console.log(<em>num</em>);</p><p>  ​    }</p></li><li><p>如果箭头函数中函数体只有一行代码，此时可以省略{},</p><p>如果只有一行，并且这一行代码是return，此时return可以省略</p><ul><li><p>let fn2 &#x3D; num &#x3D;&gt; console.log(num)</p></li><li><p>let fn3 &#x3D; function(num){return num*num}相当于</p><p>let fn3 &#x3D; num &#x3D;&gt; num*num</p></li></ul></li><li><p>求数组和，以及将一组数组的每一项都求平方，存储到新数组中去</p><ul><li><p>let arr &#x3D; [1,2,3]</p><p>let sum &#x3D; 0</p><p>arr.forEach(item &#x3D;&gt; sum +&#x3D; item)</p></li><li><p>let arr1 &#x3D; [1,2,3,4,5,6,7,8]</p><p>let newArr &#x3D; arr1.map(item &#x3D;&gt; item*item)</p></li></ul></li><li><p>箭头函数没有arguments的</p><ul><li><p>let fn &#x3D; () &#x3D;&gt; {</p><p>console.log(arrguments)</p><p>}</p><p>let fn &#x3D; (**…**arr) &#x3D;&gt; {</p><p>let sum &#x3D; 0</p><p>arr.forEach(item &#x3D;&gt; sum +&#x3D; item)</p><p>console.log(sum)</p><p>}</p><p>fn(10)</p><p>fn(10,100)</p><p>fn(10,100,1000)</p></li></ul></li><li><p>箭头函数this</p><ul><li>普通函数调用-&gt;指向window</li><li>对象函数调用-&gt;指向调用的对象</li><li>注册事件-&gt;指向事件源</li><li><em><strong>注意点</strong></em>：箭头函数内部没有自己的this，如果需要使用，浏览器会按照作用域链依次查找，事件源一般推荐用普通的匿名函数</li></ul></li></ol><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><ul><li><p>正常情况下，变量数和单元数应该一致，</p><ul><li>let [one,two,three]&#x3D;[“喜喜”，“哈哈哈”，“嘤嘤嘤”]；</li></ul></li><li><p>特色情况1：变量多，单元数少，没有接收到的数据的变量，默认是undefined</p></li><li><p>特色情况2：变量少，单元数多，没有接收到的数据的变量，多出的会忽略</p></li><li><p>如果需要把多余的参数一起接收，可以使用剩余参数</p></li><li><p>特色情况3：如果不希望变量值为undefined，此时可以给变量设置默认值</p><ul><li>let [x&#x3D;”默认1”，y&#x3D;”默认值2“，z&#x3D;”默认值3“] &#x3D; [”啧啧啧“]</li></ul></li></ul><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><h3 id="Babel转码器"><a href="#Babel转码器" class="headerlink" title="Babel转码器"></a>Babel转码器</h3><h3 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h3><h3 id="字符串扩展和新增方法"><a href="#字符串扩展和新增方法" class="headerlink" title="字符串扩展和新增方法"></a>字符串扩展和新增方法</h3><h3 id="数组扩展-扩展运算符，新增方法"><a href="#数组扩展-扩展运算符，新增方法" class="headerlink" title="数组扩展_扩展运算符，新增方法"></a>数组扩展_扩展运算符，新增方法</h3><ul><li>filter（function（item，index）{return 条件}），数组的方法，用于过滤、筛选</li></ul><h3 id="Set数据结构"><a href="#Set数据结构" class="headerlink" title="Set数据结构"></a>Set数据结构</h3><h3 id="promise对象"><a href="#promise对象" class="headerlink" title="promise对象"></a>promise对象</h3><h3 id="ASync函数"><a href="#ASync函数" class="headerlink" title="ASync函数"></a>ASync函数</h3><h3 id="Class的基本语法"><a href="#Class的基本语法" class="headerlink" title="Class的基本语法"></a>Class的基本语法</h3><h3 id="Moule模块"><a href="#Moule模块" class="headerlink" title="Moule模块"></a>Moule模块</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;动态参数&quot;&gt;&lt;a href=&quot;#动态参数&quot; class=&quot;headerlink&quot; title=&quot;动态参数&quot;&gt;&lt;/a&gt;动态参数&lt;/h3&gt;&lt;p&gt;&lt;em&gt;一般不确定实参多少个的情况下，可以把实参都接收过来&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;arguments：是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端学习笔记</title>
    <link href="http://example.com/2023/01/29/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/01/29/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-29T03:05:31.000Z</published>
    <updated>2023-01-29T03:06:08.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端学习笔记"><a href="#前端学习笔记" class="headerlink" title="前端学习笔记"></a>前端学习笔记</h2><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>dom是文档对象模型，核心对象是document</p><p>文档：一个页面就是一个文档，DOM中使用document表示</p><p>元素：页面中的所有标签都是元素，DOM中使用element表示</p><p>节点：网页总的所有内容都是节点（标签、属性等），DOM中使用node表示</p><h5 id="获取元素：getElementById（）"><a href="#获取元素：getElementById（）" class="headerlink" title="获取元素：getElementById（）"></a>获取元素：getElementById（）</h5><p>根据ID获取</p><p>script标签要写在标签的下面，因为我们文档页面从上往下加载，所以得先有标签</p><h4 id="操作元素innerHTML和innerText"><a href="#操作元素innerHTML和innerText" class="headerlink" title="操作元素innerHTML和innerText"></a>操作元素innerHTML和innerText</h4><p>innerText不识别html标签</p><p>innerHTML识别html标签，常用innerHTML</p><p>var nowtime &#x3D; +new Date();&#x2F;&#x2F;得到的就是当下的时间距离1970年1月1日0时0分0秒的毫秒数</p><p>var inputTime &#x3D; +new Date(time); &#x2F;&#x2F; 放回的是用户输入时间总的毫秒数</p><h4 id="DOM重点核心"><a href="#DOM重点核心" class="headerlink" title="DOM重点核心"></a>DOM重点核心</h4><p>主要对元素的操作，主要有增删改查（CRUD）、创建元素、元素属性操作、事件操作。</p><h4 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h4><p>onkeyup keyup 按键弹起的时候触发 </p><p>onkeydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</p><p>onkeypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</p><p>三个事件的执行顺序  keydown – keypress – keyup</p><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><p>BOM即浏览器对象模型，提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window</p><p>width：auto与100%</p><p>当width设置为100%，会等于父元素的width</p><p>当width设置为auto，会根据元素本身的height这个属性决定。简单的说按照height的缩放比例来设置</p><h4 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h4><ul><li><p>块级元素</p><ol><li>独占一行</li><li>宽度默认是父元素的宽度</li><li>可以设置宽高</li><li>例如div、p、h系列、li、ul、dl、dt、dd、form、header、nav、footer等</li></ol></li><li><p>行内元素</p><ol><li>不换行，一行可以显示多个</li><li>宽度和高度默认由内容撑开</li><li>设置宽高不生效</li><li>例如span、a、b、u、i、strong、ins、em、del等</li></ol></li><li><p>行内块元素</p><ol><li>一行可以显示多个</li><li>可以设置宽高</li><li>例如input、textarea、button、select</li><li>特殊清空：img标签由行内块元素特点，但是chrome调试工具显示为行内标签</li></ol></li><li><p>元素显示模式转换</p><ol><li>目的：改变元素默认的显示特点，让元素符合布局要求</li></ol></li></ul><p>扩展1：HTML嵌套规范注意点</p><ol><li><p>块级元素一般作为大容器，可以嵌套文本。块级元素。行内元素、行内块元素等等</p><ul><li>但是p标签中不要嵌套div、p、h等块级元素</li></ul></li><li><p>a标签内部可以嵌套任意元素</p><ul><li>但是a标签不能嵌套a标签</li></ul></li></ol><h3 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h3><h6 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h6><p>一般子元素会继承父元素里的样式，关于文字的样式会继承，但是有些元素会有默认的文字样式所以就没有继承</p><h6 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h6><h6 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h6><p>绝对定位的盒子使用margin不能居中，可以用left百分比写法，再加上margin，或者用transform：translate(-50%，-50%)位移的写法，这样写的好处就是可以自己计算宽高的一半</p><p>相对定位会使标签元素脱标，并且原有位置依然被占用</p><p>定位习惯子绝夫相的写法</p><h5 id="基线对齐"><a href="#基线对齐" class="headerlink" title="基线对齐"></a>基线对齐</h5><p>属性名：vertical-align，默认文字按基线对齐，浏览器默认将行内块和行内标签认定为文字，改变显示模式也可以解决基线问题</p><p>一般解决文字水平方向对不齐的情况，想居中对齐用middle，顶对齐用top，底对齐用bottom</p><h5 id="overflow：hidden"><a href="#overflow：hidden" class="headerlink" title="overflow：hidden"></a>overflow：hidden</h5><p>隐藏盒子溢出部分</p><h5 id="visibility-hidden"><a href="#visibility-hidden" class="headerlink" title="visibility:hidden"></a>visibility:hidden</h5><p>占位隐藏</p><h5 id="display：none"><a href="#display：none" class="headerlink" title="display：none"></a>display：none</h5><p>不占位隐藏</p><p>常用于子菜单显示，不占位隐藏较为常用</p><h5 id="（扩展），透明度"><a href="#（扩展），透明度" class="headerlink" title="（扩展），透明度"></a>（扩展），透明度</h5><ul><li>opacity</li><li>会使内容都变透明，纯写html、css不会用到，一般用rgba(a,b,c,0.5)这种，不会使内容变透明</li></ul><h5 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h5><ul><li>减少服务器发送次数，减轻服务器压力，提高页面加载速度</li><li>精灵图就是将多张小图片合并成一张大图片，这张大图片就叫做精灵图</li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端学习笔记&quot;&gt;&lt;a href=&quot;#前端学习笔记&quot; class=&quot;headerlink&quot; title=&quot;前端学习笔记&quot;&gt;&lt;/a&gt;前端学习笔记&lt;/h2&gt;&lt;h3 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM</summary>
      
    
    
    
    
  </entry>
  
</feed>
